#include<stdio.h>
#include<stdlib.h>
int m, n, i, j;
int u, v, w;
int graph[1001][1001] = { 0, };
void prim() 
{
	int v[1001],e[1001],sum=0,min;
	v[0] = 0; e[0] = 0;
	for (int i = 2; i <= n; i++) //初始化操作
	{
		e[i] = graph[1][i];
		v[i] = 1;
	}
	v[1] = 0;
	for (int i = 2; i <= n; i++)//n个点就要遍历n-1次 
	{
		int min = 0x3f3f3f3f;
		int id=0;
		for (int j = 2; j <= n; j++)// 遍历一遍找出最小的权边
		{
			if (e[j]<min && e[j]!=0)// 如果该权边小于最小值并且另一个点不在该生成树内
			{
				min = e[j];//刷新最小值并标记最小点
				id = j;
			}
		}
		printf("%d - %d : %d\n", v[id], id, min);//输出最小生成树的边
		sum +=min;      //将找到的最小边加入答案里
		e[id] = 0;      //标记这个点被访问

		for (int j = 2; j <= n; j++) //更新节点与其他节点之间的权值
		{     
			if (e[j] > graph[id][j]&& e[j]!=0)
			{
				e[j] = graph[id][j];
				v[j] = id;
			}
		}
	}
	printf("%d\n", sum);
}

int main() 
{
	scanf_s("%d %d", &n, &m);//n个角，m条边
	for (i = 1; i <= m; i++)
	{
		for (int j = 1; j <= m;j++) 
		{
			graph[i][j] = 0x3f3f3f3f;
		}
	}
	for (i = 1; i <= m; i++) 
	{
		scanf_s("%d %d %d", &u, &v, &w);
		graph[u][v] = w;
		graph[v][u] = w;
	}
	prim();
	return 0;
}
